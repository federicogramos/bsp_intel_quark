From xxxx Mon Sep 17 00:00:00 2001
From: Bryan O'Donoghue <bryan.odonoghue@intel.com>
Date: Wed, 21 Jan 2015 10:47:48 +0000
Subject: [PATCH 15/26] Quark USB host

---
 drivers/usb/host/ehci-hub.c   | 78 ++++++++++++++++++++++++++++++++++++++--
 drivers/usb/host/ehci-pci.c   | 15 ++++++++
 drivers/usb/host/ehci.h       | 16 +++++++++
 drivers/usb/host/pci-quirks.c | 83 +++++++++++++++++++++++++++++++++++++++++++
 drivers/usb/host/pci-quirks.h |  4 +++
 5 files changed, 194 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/host/ehci-hub.c b/drivers/usb/host/ehci-hub.c
index 7d06e77..8f337b6 100644
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2001-2004 by David Brownell
+ * Portions Copyright (C) 2015 Intel Corporation
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the
@@ -569,6 +570,11 @@ static int check_reset_complete (
 	} else {
 		ehci_dbg(ehci, "port %d reset complete, port enabled\n",
 			index + 1);
+		if (ehci->has_x1000_phy && ehci->x1000_phy_squelch) {
+			/* If squelch was adjusted, then reset back to normal */
+			quirk_qrk_usb_phy_set_squelch(QRK_SQUELCH_DEFAULT);
+			ehci->x1000_phy_squelch = QRK_SQUELCH_DEFAULT;
+		}
 		/* ensure 440EPx ohci controller state is suspended */
 		if (ehci->has_amcc_usb23)
 			set_ohci_hcfs(ehci, 0);
@@ -660,6 +666,62 @@ ehci_hub_status_data (struct usb_hcd *hcd, char *buf)
 
 /*-------------------------------------------------------------------------*/
 
+/*
+ * __ehci_adjust_x1000_squelch
+ *
+ * Adjust the squelch on PHY for Intel Quark X1000
+ *
+ * Feature on X1000 SOC where squelch of on SOC PHY may need to be adjusted
+ * during enumeration of HS, trying a number of different levels.
+ * The adjustment is followed by a port repower to enable
+ * the state machine realign and a RESET to restart the
+ * enumeration process. This will result in succesful HS enumeration instead
+ * of cycling through waits and resets which were not solving the issue and
+ * ultimately ending up with no enumeration.
+ */
+
+static void
+__ehci_adjust_x1000_squelch(
+	struct ehci_hcd	*ehci,
+	u32 __iomem	*status_reg,
+	u16		windex
+) {
+	u32		temp;
+	temp = ehci_readl(ehci, status_reg);
+
+	switch (ehci->x1000_phy_squelch) {
+	case QRK_SQUELCH_DEFAULT:   /* No squelch yet done now put it low */
+		ehci->x1000_phy_squelch = QRK_SQUELCH_LO;
+		break;
+	case QRK_SQUELCH_LO: /* Low squelch done now put it high */
+		ehci->x1000_phy_squelch = QRK_SQUELCH_HI;
+		break;
+	case QRK_SQUELCH_HI:
+			/* High done now put it back to default and
+			   reset state for for next time */
+		ehci->x1000_phy_squelch = QRK_SQUELCH_DEFAULT;
+		break;
+	}
+	temp = ehci_readl(ehci, status_reg);
+	ehci_writel(ehci, temp & ~PORT_POWER, status_reg);
+	quirk_qrk_usb_phy_set_squelch(ehci->x1000_phy_squelch);
+	temp = ehci_readl(ehci, status_reg);
+	ehci_writel(ehci, temp | PORT_POWER, status_reg);
+	handshake(ehci, status_reg, PORT_CONNECT, 1, 2000);
+			/*  allow time for repower to work */
+	if (ehci->x1000_phy_squelch == QRK_SQUELCH_DEFAULT)
+		return;	/* do not reset port when finished
+			   as we are OK with enum. Just set
+			   back to default for next device */
+	temp = ehci_readl(ehci, status_reg);
+	temp |= PORT_RESET;
+	temp &= ~PORT_PE;
+	ehci->reset_done[windex] = jiffies + msecs_to_jiffies(50);
+	ehci_writel(ehci, temp, status_reg);
+}
+
+/*-------------------------------------------------------------------------*/
+
 static void
 ehci_hub_descriptor (
 	struct ehci_hcd			*ehci,
@@ -903,7 +965,16 @@ static int ehci_hub_control (
 			 */
 			retval = handshake(ehci, status_reg,
 					PORT_RESET, 0, 1000);
-			if (retval != 0) {
+			if (retval == -ETIMEDOUT && ehci->has_x1000_phy) {
+				/* Quark, squelch adjust and RESET needed */
+				__ehci_adjust_x1000_squelch(ehci, status_reg,
+								wIndex);
+				if (ehci->x1000_phy_squelch)
+					/* If squelch adjusted */
+					goto error;
+				/* else squelch is back at default allow enum
+					to continue */
+			} else if (retval != 0) {
 				ehci_err (ehci, "port %d reset error %d\n",
 					wIndex + 1, retval);
 				goto error;
@@ -1056,7 +1127,10 @@ static int ehci_hub_control (
 				ehci_vdbg (ehci, "port %d reset\n", wIndex + 1);
 				temp |= PORT_RESET;
 				temp &= ~PORT_PE;
-
+				if (ehci->has_x1000_phy
+						&& ehci->x1000_phy_squelch)
+					ehci->x1000_phy_squelch
+						= QRK_SQUELCH_DEFAULT;
 				/*
 				 * caller must wait, then call GetPortStatus
 				 * usb 2.0 spec says 50 ms resets on root
diff --git a/drivers/usb/host/ehci-pci.c b/drivers/usb/host/ehci-pci.c
index 170b939..92eeec5 100644
--- a/drivers/usb/host/ehci-pci.c
+++ b/drivers/usb/host/ehci-pci.c
@@ -50,6 +50,10 @@ static int ehci_pci_reinit(struct ehci_hcd *ehci, struct pci_dev *pdev)
 	if (!retval)
 		ehci_dbg(ehci, "MWI active\n");
 
+	/* Reset the threshold limit */
+	if(unlikely(usb_is_intel_qrk(pdev)))
+		usb_set_qrk_bulk_thresh(pdev);
+
 	return 0;
 }
 
@@ -114,6 +118,17 @@ static int ehci_pci_setup(struct usb_hcd *hcd)
 	case PCI_VENDOR_ID_INTEL:
 		if (pdev->device == PCI_DEVICE_ID_INTEL_CE4100_USB)
 			hcd->has_tt = 1;
+		else if (pdev->device == PCI_DEVICE_ID_INTEL_QUARK_X1000_SOC
+						&& pdev->revision  == 0x10) {
+			ehci->has_x1000_phy = 1;
+			ehci->x1000_phy_squelch = QRK_SQUELCH_DEFAULT;
+			/* Intel Quark device of this revision requires
+				adjustment of squelch on the PHY
+			*/
+			ehci_info(ehci,
+			"QUARK USB phy rev 0x%x may have squelch ref adjusted\n"
+						, pdev->revision);
+		}
 		break;
 	case PCI_VENDOR_ID_TDI:
 		if (pdev->device == PCI_DEVICE_ID_TDI_EHCI)
diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index 36c3a82..4fa18af 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -201,6 +201,22 @@ struct ehci_hcd {			/* one per controller */
 	unsigned		has_synopsys_hc_bug:1; /* Synopsys HC */
 	unsigned		frame_index_bug:1; /* MosChip (AKA NetMos) */
 
+	unsigned		has_x1000_phy:1;
+	/* Intel Quark X10xx needs squelch adjustment during HS enumeration
+	 * to eliminate noise at around default power on squelch of 112.5mV
+	 * which causes the noise to look like signalling. We need to adjust
+	 * the squelch to eliminate that false signalling.
+	 * First we adjust it lo and if the false signalling is now damped,
+	 * enumeration works OK. If that fails  we adjust hi and see
+	 * if it enumerates OK, if not we are at the END and will default to
+	 * full speed.  */
+	#define QRK_SQUELCH_DEFAULT	0 /* apply default of 112.5 mV */
+	#define QRK_SQUELCH_LO		1 /* apply low  of 100 mV */
+	#define QRK_SQUELCH_HI		2 /* apply high of 125 mV */
+
+	unsigned		x1000_phy_squelch:2;
+					/*Squelch state during quirk */
+
 	/* required for usb32 quirk */
 	#define OHCI_CTRL_HCFS          (3 << 6)
 	#define OHCI_USB_OPER           (2 << 6)
diff --git a/drivers/usb/host/pci-quirks.c b/drivers/usb/host/pci-quirks.c
index 4c338ec..a123292 100644
--- a/drivers/usb/host/pci-quirks.c
+++ b/drivers/usb/host/pci-quirks.c
@@ -17,6 +17,7 @@
 #include <linux/export.h>
 #include <linux/acpi.h>
 #include <linux/dmi.h>
+#include <linux/intel_qrk_sb.h>
 #include "pci-quirks.h"
 #include "xhci-ext-caps.h"
 
@@ -722,6 +723,47 @@ static int handshake(void __iomem *ptr, u32 mask, u32 done,
 	return -ETIMEDOUT;
 }
 
+bool usb_is_intel_qrk(struct pci_dev *pdev)
+{
+	return pdev->vendor == PCI_VENDOR_ID_INTEL &&
+		pdev->device == PCI_DEVICE_ID_INTEL_QUARK_X1000_SOC;
+
+}
+EXPORT_SYMBOL_GPL(usb_is_intel_qrk);
+
+#define EHCI_INSNREG01		0x84
+#define EHCI_INSNREG01_THRESH	0x007F007F	/* Threshold value */
+void usb_set_qrk_bulk_thresh(struct pci_dev *pdev)
+{
+	void __iomem *base, *op_reg_base;
+	u8 cap_length;
+	u32 val;
+
+	if (!mmio_resource_enabled(pdev, 0))
+		return;
+
+	base = pci_ioremap_bar(pdev, 0);
+	if (base == NULL)
+		return;
+
+	cap_length = readb(base);
+	op_reg_base = base + cap_length;
+
+	val = readl(op_reg_base + EHCI_INSNREG01);
+	dev_printk(KERN_INFO, &pdev->dev, "INSNREG01 is 0x%08x\n", val);
+
+	val = EHCI_INSNREG01_THRESH;
+
+	writel(val, op_reg_base + EHCI_INSNREG01);
+
+	val = readl(op_reg_base + EHCI_INSNREG01);
+	dev_printk(KERN_INFO, &pdev->dev, "INSNREG01 is 0x%08x\n", val);
+
+	iounmap(base);
+
+}
+EXPORT_SYMBOL_GPL(usb_set_qrk_bulk_thresh);
+
 #define PCI_DEVICE_ID_INTEL_LYNX_POINT_XHCI	0x8C31
 #define PCI_DEVICE_ID_INTEL_LYNX_POINT_LP_XHCI	0x9C31
 
@@ -943,6 +985,47 @@ hc_init:
 
 	iounmap(base);
 }
+#ifdef CONFIG_INTEL_QUARK_X1000_SOC
+/**
+ * quirk_qrk_usb_phy_set_squelch
+ *
+ * Uses side band access on quark to access USB PHY registers where the
+ * squelch value can be adjusted.
+ * @threshold: ref to millivolts to set the squelch to there are just a few
+ *             values available to use in quark
+ *
+ * QRK_SQUELCH_DEFAULT	0 apply default of 112.5 mV
+ * QRK_SQUELCH_LO	1 apply low  of 100 mV
+ * QRK_SQUELCH_HI	2 apply high of 125 mV
+ */
+#define USB2COMPBG	0x7F04	/* PHY register over side band */
+#define HS_SQ_REF_POS   13	/* bit position for squelch */
+#define HS_SQ_REF_MASK  (3 << HS_SQ_REF_POS) /* bit mask for squelch */
+
+#define USBPHY_SB_READ	0x06	/* Sideband read command  */
+#define USBPHY_SB_WRITE	0x07	/* Sideband write command */
+#define SB_ID_USBPHY	0x14	/* Port of USB PHY */
+
+void quirk_qrk_usb_phy_set_squelch(u32 threshold)
+{
+	u32 regval, regnew;
+	intel_qrk_sb_read_reg(SB_ID_USBPHY, USBPHY_SB_READ, USB2COMPBG,
+								 &regval, 1);
+	regnew = regval & ~HS_SQ_REF_MASK;
+	regnew |= ((threshold<<HS_SQ_REF_POS) & HS_SQ_REF_MASK);
+	intel_qrk_sb_write_reg(SB_ID_USBPHY, USBPHY_SB_WRITE, USB2COMPBG,
+								regnew, 1);
+	pr_info("USB PHY squelch ref adjusted from %8x to %8x\n",
+						regval, regnew);
+}
+#else
+inline void quirk_qrk_usb_phy_set_squelch(u32 threshold)
+{
+}
+#endif
+EXPORT_SYMBOL_GPL(quirk_qrk_usb_phy_set_squelch);
+
+
 
 static void quirk_usb_early_handoff(struct pci_dev *pdev)
 {
diff --git a/drivers/usb/host/pci-quirks.h b/drivers/usb/host/pci-quirks.h
index 7f69a39..7575177 100644
--- a/drivers/usb/host/pci-quirks.h
+++ b/drivers/usb/host/pci-quirks.h
@@ -9,8 +9,12 @@ void usb_amd_dev_put(void);
 void usb_amd_quirk_pll_disable(void);
 void usb_amd_quirk_pll_enable(void);
 bool usb_is_intel_switchable_xhci(struct pci_dev *pdev);
+bool usb_is_intel_qrk(struct pci_dev *pdev);
+void usb_set_qrk_bulk_thresh(struct pci_dev *pdev);
 void usb_enable_xhci_ports(struct pci_dev *xhci_pdev);
 void usb_disable_xhci_ports(struct pci_dev *xhci_pdev);
+#define PCI_DEVICE_ID_INTEL_QUARK_X1000_SOC		0x0939
+void quirk_qrk_usb_phy_set_squelch(u32 threshold);
 #else
 static inline void usb_amd_quirk_pll_disable(void) {}
 static inline void usb_amd_quirk_pll_enable(void) {}
