From xxxx Mon Sep 17 00:00:00 2001
From: Xin Zhang <xin.x.zhang@intel.com>
Date: Wed, 21 Jan 2015 10:47:48 +0000
Subject: [PATCH 12/26] Quark J1708

---
 drivers/net/can/slcan.c         | 393 +++++++++++++++++++++++++++-------------
 include/linux/intel_qrk_j1708.h | 136 ++++++++++++++
 2 files changed, 399 insertions(+), 130 deletions(-)
 create mode 100644 include/linux/intel_qrk_j1708.h

diff --git a/drivers/net/can/slcan.c b/drivers/net/can/slcan.c
index adc3708..e088cce 100644
--- a/drivers/net/can/slcan.c
+++ b/drivers/net/can/slcan.c
@@ -7,6 +7,8 @@
  *                   Fred N. van Kempen <waltje@uwalt.nl.mugnet.org>
  * slcan.c Author  : Oliver Hartkopp <socketcan@hartkopp.net>
  *
+ * SLCAN channel muxing (XSLCAN) is Copyright (C) 2015 Intel Corporation.
+ *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the
  * Free Software Foundation; either version 2 of the License, or (at your
@@ -65,41 +67,57 @@ MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Oliver Hartkopp <socketcan@hartkopp.net>");
 
 #define SLCAN_MAGIC 0x53CA
+#define MUX_NETDEV_MAX 10
 
-static int maxdev = 10;		/* MAX number of SLCAN channels;
+static int maxchannel = 10;	/* MAX number of SLCAN channels;
 				   This can be overridden with
-				   insmod slcan.ko maxdev=nnn	*/
-module_param(maxdev, int, 0);
-MODULE_PARM_DESC(maxdev, "Maximum number of slcan interfaces");
+				   insmod slcan.ko maxcahnnel=nnn   */
+module_param(maxchannel, int, 0);
+MODULE_PARM_DESC(maxchannel, "Maximum number of slcan channels");
+
+static int muxnetdevs = 2;	/*	MAX number of net devices multiplexed
+					per SLCAN channel;
+					This can be overridden with
+					insmod slcan.ko muxnetdevs=nnn   */
+module_param(muxnetdevs, int, 0);
+MODULE_PARM_DESC(muxnetdevs, "Max number of netdevs muxed per slcan channel");
 
 /* maximum rx buffer len: extended CAN frame with timestamp */
-#define SLC_MTU (sizeof("T1111222281122334455667788EA5F\r")+1)
+#define SLC_MTU (sizeof("0T1111222281122334455667788EA5F\r")+1)
 
-struct slcan {
+struct slcan_channel {
 	int			magic;
 
 	/* Various fields. */
 	struct tty_struct	*tty;		/* ptr to TTY structure	     */
-	struct net_device	*dev;		/* easy for intr handling    */
+	struct net_device	*dev[MUX_NETDEV_MAX];
+	/* easy for intr handling    */
 	spinlock_t		lock;
 
 	/* These are pointers to the malloc()ed frame buffers. */
 	unsigned char		rbuff[SLC_MTU];	/* receiver buffer	     */
 	int			rcount;         /* received chars counter    */
-	unsigned char		xbuff[SLC_MTU];	/* transmitter buffer	     */
-	unsigned char		*xhead;         /* pointer to next XMIT byte */
-	int			xleft;          /* bytes left in XMIT queue  */
 
 	unsigned long		flags;		/* Flag values/ mode etc     */
 #define SLF_INUSE		0		/* Channel in use            */
 #define SLF_ERROR		1               /* Parity, etc. error        */
 };
 
-static struct net_device **slcan_devs;
+struct slcan_dev {
+	struct slcan_channel	*channel;	/* parent slcan channel      */
+	int			addr;
+
+	/* These are pointers to the malloc()ed frame buffers. */
+	unsigned char		xbuff[SLC_MTU];	/* transmitter buffer	     */
+	unsigned char		*xhead;         /* pointer to next XMIT byte */
+	int			xleft;          /* bytes left in XMIT queue  */
+};
 
- /************************************************************************
-  *			SLCAN ENCAPSULATION FORMAT			 *
-  ************************************************************************/
+static struct slcan_channel **slcan_channels;
+
+/************************************************************************
+ *			SLCAN ENCAPSULATION FORMAT			 *
+ ************************************************************************/
 
 /*
  * A CAN frame has a can_id (11 bit standard frame format OR 29 bit extended
@@ -132,26 +150,32 @@ static struct net_device **slcan_devs;
  *
  */
 
- /************************************************************************
-  *			STANDARD SLCAN DECAPSULATION			 *
-  ************************************************************************/
+/************************************************************************
+ *			STANDARD SLCAN DECAPSULATION			 *
+ ************************************************************************/
 
 /* Send one completely decapsulated can_frame to the network layer */
-static void slc_bump(struct slcan *sl)
+static void slc_bump(struct slcan_channel *sl)
 {
 	struct sk_buff *skb;
 	struct can_frame cf;
 	int i, dlc_pos, tmp;
 	unsigned long ultmp;
-	char cmd = sl->rbuff[0];
+	int ext_frame, dev_idx;
+
+	char cmd;
+
+	ext_frame = (sl->rbuff[0] >= '0' && sl->rbuff[0] <= '9') ? 1 : 0;
+
+	cmd = sl->rbuff[ext_frame];
 
 	if ((cmd != 't') && (cmd != 'T') && (cmd != 'r') && (cmd != 'R'))
 		return;
 
 	if (cmd & 0x20) /* tiny chars 'r' 't' => standard frame format */
-		dlc_pos = 4; /* dlc position tiiid */
+		dlc_pos = 4 + ext_frame; /* dlc position tiiid */
 	else
-		dlc_pos = 9; /* dlc position Tiiiiiiiid */
+		dlc_pos = 9 + ext_frame; /* dlc position Tiiiiiiiid */
 
 	if (!((sl->rbuff[dlc_pos] >= '0') && (sl->rbuff[dlc_pos] < '9')))
 		return;
@@ -160,7 +184,7 @@ static void slc_bump(struct slcan *sl)
 
 	sl->rbuff[dlc_pos] = 0; /* terminate can_id string */
 
-	if (strict_strtoul(sl->rbuff+1, 16, &ultmp))
+	if (strict_strtoul(sl->rbuff + 1 + ext_frame, 16, &ultmp))
 		return;
 
 	cf.can_id = ultmp;
@@ -188,7 +212,12 @@ static void slc_bump(struct slcan *sl)
 	if (!skb)
 		return;
 
-	skb->dev = sl->dev;
+	dev_idx = ext_frame ? sl->rbuff[0] - '0' : 0;
+
+	if (sl->dev[dev_idx] == NULL)
+		return;
+
+	skb->dev = sl->dev[dev_idx];
 	skb->protocol = htons(ETH_P_CAN);
 	skb->pkt_type = PACKET_BROADCAST;
 	skb->ip_summed = CHECKSUM_UNNECESSARY;
@@ -196,19 +225,18 @@ static void slc_bump(struct slcan *sl)
 	       &cf, sizeof(struct can_frame));
 	netif_rx_ni(skb);
 
-	sl->dev->stats.rx_packets++;
-	sl->dev->stats.rx_bytes += cf.can_dlc;
+	sl->dev[dev_idx]->stats.rx_packets++;
+	sl->dev[dev_idx]->stats.rx_bytes += cf.can_dlc;
 }
 
 /* parse tty input stream */
-static void slcan_unesc(struct slcan *sl, unsigned char s)
+static void slcan_unesc(struct slcan_channel *sl, unsigned char s)
 {
 
 	if ((s == '\r') || (s == '\a')) { /* CR or BEL ends the pdu */
 		if (!test_and_clear_bit(SLF_ERROR, &sl->flags) &&
-		    (sl->rcount > 4))  {
+		    (sl->rcount > 4))
 			slc_bump(sl);
-		}
 		sl->rcount = 0;
 	} else {
 		if (!test_bit(SLF_ERROR, &sl->flags))  {
@@ -216,41 +244,53 @@ static void slcan_unesc(struct slcan *sl, unsigned char s)
 				sl->rbuff[sl->rcount++] = s;
 				return;
 			} else {
-				sl->dev->stats.rx_over_errors++;
+				sl->dev[0]->stats.rx_over_errors++;
 				set_bit(SLF_ERROR, &sl->flags);
 			}
 		}
 	}
 }
 
- /************************************************************************
-  *			STANDARD SLCAN ENCAPSULATION			 *
-  ************************************************************************/
+/************************************************************************
+ *			STANDARD SLCAN ENCAPSULATION			 *
+ ************************************************************************/
 
 /* Encapsulate one can_frame and stuff into a TTY queue. */
-static void slc_encaps(struct slcan *sl, struct can_frame *cf)
+static void slc_encaps(struct slcan_dev *sl_dev, struct can_frame *cf,
+		       int dev_idx)
 {
 	int actual, idx, i;
-	char cmd;
+	char cmd, if_idx;
 
 	if (cf->can_id & CAN_RTR_FLAG)
 		cmd = 'R'; /* becomes 'r' in standard frame format */
 	else
 		cmd = 'T'; /* becomes 't' in standard frame format */
 
-	if (cf->can_id & CAN_EFF_FLAG)
-		sprintf(sl->xbuff, "%c%08X%d", cmd,
-			cf->can_id & CAN_EFF_MASK, cf->can_dlc);
-	else
-		sprintf(sl->xbuff, "%c%03X%d", cmd | 0x20,
-			cf->can_id & CAN_SFF_MASK, cf->can_dlc);
+	if (muxnetdevs < 2) {
+		if (cf->can_id & CAN_EFF_FLAG)
+			sprintf(sl_dev->xbuff, "%c%08X%d", cmd,
+				cf->can_id & CAN_EFF_MASK, cf->can_dlc);
+		else
+			sprintf(sl_dev->xbuff, "%c%03X%d", cmd | 0x20,
+				cf->can_id & CAN_SFF_MASK, cf->can_dlc);
+	} else {
+		if_idx = dev_idx + '0';
+		if (cf->can_id & CAN_EFF_FLAG)
+			sprintf(sl_dev->xbuff, "%c%c%08X%d", if_idx, cmd,
+				cf->can_id & CAN_EFF_MASK, cf->can_dlc);
+		else
+			sprintf(sl_dev->xbuff, "%c%c%03X%d", if_idx,
+				cmd | 0x20,
+				cf->can_id & CAN_SFF_MASK, cf->can_dlc);
+	}
 
-	idx = strlen(sl->xbuff);
+	idx = strlen(sl_dev->xbuff);
 
 	for (i = 0; i < cf->can_dlc; i++)
-		sprintf(&sl->xbuff[idx + 2*i], "%02X", cf->data[i]);
+		sprintf(&sl_dev->xbuff[idx + 2 * i], "%02X", cf->data[i]);
 
-	strcat(sl->xbuff, "\r"); /* add terminating character */
+	strcat(sl_dev->xbuff, "\r"); /* add terminating character */
 
 	/* Order of next two lines is *very* important.
 	 * When we are sending a little amount of data,
@@ -260,11 +300,15 @@ static void slc_encaps(struct slcan *sl, struct can_frame *cf)
 	 * if we did not request it before write operation.
 	 *       14 Oct 1994  Dmitry Gorodchanin.
 	 */
-	set_bit(TTY_DO_WRITE_WAKEUP, &sl->tty->flags);
-	actual = sl->tty->ops->write(sl->tty, sl->xbuff, strlen(sl->xbuff));
-	sl->xleft = strlen(sl->xbuff) - actual;
-	sl->xhead = sl->xbuff + actual;
-	sl->dev->stats.tx_bytes += cf->can_dlc;
+	set_bit(TTY_DO_WRITE_WAKEUP, &sl_dev->channel->tty->flags);
+	actual = sl_dev->channel->tty->ops->write(sl_dev->channel->tty,
+			sl_dev->xbuff,
+			strlen(sl_dev->xbuff));
+
+	sl_dev->xleft = strlen(sl_dev->xbuff) - actual;
+	sl_dev->xhead = sl_dev->xbuff + actual;
+	sl_dev->channel->dev[dev_idx]->stats.tx_bytes += cf->can_dlc;
+
 }
 
 /*
@@ -273,31 +317,44 @@ static void slc_encaps(struct slcan *sl, struct can_frame *cf)
  */
 static void slcan_write_wakeup(struct tty_struct *tty)
 {
-	int actual;
-	struct slcan *sl = (struct slcan *) tty->disc_data;
+	int actual, i;
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
+
+	struct slcan_dev *sl_dev;
 
 	/* First make sure we're connected. */
-	if (!sl || sl->magic != SLCAN_MAGIC || !netif_running(sl->dev))
+	if (!sl || sl->magic != SLCAN_MAGIC)
 		return;
 
-	if (sl->xleft <= 0)  {
-		/* Now serial buffer is almost free & we can start
-		 * transmission of another packet */
-		sl->dev->stats.tx_packets++;
-		clear_bit(TTY_DO_WRITE_WAKEUP, &tty->flags);
-		netif_wake_queue(sl->dev);
-		return;
-	}
+	for (i = 0; i < muxnetdevs; i++) {
+
+		if (!netif_running(sl->dev[i]))
+			continue;
+
+		sl_dev = netdev_priv(sl->dev[i]);
+
+		if (sl_dev->xleft <= 0)  {
+			/* Now serial buffer is almost free & we can start
+			 * transmission of another packet */
+			sl->dev[i]->stats.tx_packets++;
+			clear_bit(TTY_DO_WRITE_WAKEUP, &tty->flags);
+			netif_wake_queue(sl->dev[i]);
+			continue;
+		}
 
-	actual = tty->ops->write(tty, sl->xhead, sl->xleft);
-	sl->xleft -= actual;
-	sl->xhead += actual;
+		actual = tty->ops->write(tty, sl_dev->xhead, sl_dev->xleft);
+
+		sl_dev->xleft -= actual;
+		sl_dev->xhead += actual;
+	}
 }
 
 /* Send a can_frame to a TTY queue. */
 static netdev_tx_t slc_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-	struct slcan *sl = netdev_priv(dev);
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
 
 	if (skb->len != sizeof(struct can_frame))
 		goto out;
@@ -313,8 +370,9 @@ static netdev_tx_t slc_xmit(struct sk_buff *skb, struct net_device *dev)
 		goto out;
 	}
 
-	netif_stop_queue(sl->dev);
-	slc_encaps(sl, (struct can_frame *) skb->data); /* encaps & send */
+	netif_stop_queue(sl->dev[sl_dev->addr]);
+	slc_encaps(sl_dev, (struct can_frame *) skb->data,
+		   sl_dev->addr); /* encaps & send */
 	spin_unlock(&sl->lock);
 
 out:
@@ -330,7 +388,9 @@ out:
 /* Netdevice UP -> DOWN routine */
 static int slc_close(struct net_device *dev)
 {
-	struct slcan *sl = netdev_priv(dev);
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
 
 	spin_lock_bh(&sl->lock);
 	if (sl->tty) {
@@ -339,7 +399,7 @@ static int slc_close(struct net_device *dev)
 	}
 	netif_stop_queue(dev);
 	sl->rcount   = 0;
-	sl->xleft    = 0;
+	sl_dev->xleft    = 0;
 	spin_unlock_bh(&sl->lock);
 
 	return 0;
@@ -348,7 +408,9 @@ static int slc_close(struct net_device *dev)
 /* Netdevice DOWN -> UP routine */
 static int slc_open(struct net_device *dev)
 {
-	struct slcan *sl = netdev_priv(dev);
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
 
 	if (sl->tty == NULL)
 		return -ENODEV;
@@ -361,9 +423,33 @@ static int slc_open(struct net_device *dev)
 /* Hook the destructor so we can free slcan devs at the right point in time */
 static void slc_free_netdev(struct net_device *dev)
 {
-	int i = dev->base_addr;
+	int dev_idx, devs_in_use, i;
+
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
+
+	dev_idx = sl_dev->addr;
+
 	free_netdev(dev);
-	slcan_devs[i] = NULL;
+
+	sl->dev[dev_idx] = NULL;
+
+	devs_in_use = 0;
+
+	for (i = 0; i < muxnetdevs; i++) {
+		if (sl->dev[i] != 0)
+			devs_in_use++;
+	}
+
+	/* Free slcan_channel when not referencing any netdev. */
+	if (devs_in_use == 0) {
+		for (i = 0; i < maxchannel; i++) {
+			if (sl == slcan_channels[i])
+				slcan_channels[i] = NULL;
+		}
+		kfree(sl);
+	}
 }
 
 static const struct net_device_ops slc_netdev_ops = {
@@ -405,16 +491,19 @@ static void slc_setup(struct net_device *dev)
 static void slcan_receive_buf(struct tty_struct *tty,
 			      const unsigned char *cp, char *fp, int count)
 {
-	struct slcan *sl = (struct slcan *) tty->disc_data;
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
 
-	if (!sl || sl->magic != SLCAN_MAGIC || !netif_running(sl->dev))
+	if (!sl || sl->magic != SLCAN_MAGIC)
+		return;
+
+	if (!netif_running(sl->dev[0]))
 		return;
 
 	/* Read the characters out of the buffer */
 	while (count--) {
 		if (fp && *fp++) {
 			if (!test_and_set_bit(SLF_ERROR, &sl->flags))
-				sl->dev->stats.rx_errors++;
+				sl->dev[0]->stats.rx_errors++;
 			cp++;
 			continue;
 		}
@@ -429,55 +518,80 @@ static void slcan_receive_buf(struct tty_struct *tty,
 /* Collect hanged up channels */
 static void slc_sync(void)
 {
-	int i;
-	struct net_device *dev;
-	struct slcan	  *sl;
+	int i, j;
+	struct slcan_channel *sl;
 
-	for (i = 0; i < maxdev; i++) {
-		dev = slcan_devs[i];
-		if (dev == NULL)
+	for (i = 0; i < maxchannel; i++) {
+		sl = slcan_channels[i];
+		if (sl == NULL)
 			break;
 
-		sl = netdev_priv(dev);
 		if (sl->tty)
 			continue;
-		if (dev->flags & IFF_UP)
-			dev_close(dev);
+
+		for (j = 0; j < muxnetdevs; j++) {
+
+			if (sl->dev[i] == NULL)
+				continue;
+
+			if (sl->dev[i]->flags & IFF_UP)
+				dev_close(sl->dev[i]);
+		}
 	}
 }
 
 /* Find a free SLCAN channel, and link in this `tty' line. */
-static struct slcan *slc_alloc(dev_t line)
+static struct slcan_channel *slc_alloc(dev_t line)
 {
-	int i;
+	int i, j;
 	char name[IFNAMSIZ];
 	struct net_device *dev = NULL;
-	struct slcan       *sl;
+	struct slcan_channel *sl;
+	struct slcan_dev *sl_dev;
 
-	for (i = 0; i < maxdev; i++) {
-		dev = slcan_devs[i];
-		if (dev == NULL)
+	for (i = 0; i < maxchannel; i++) {
+		sl = slcan_channels[i];
+		if (sl == NULL)
 			break;
 
 	}
 
 	/* Sorry, too many, all slots in use */
-	if (i >= maxdev)
+	if (i >= maxchannel)
 		return NULL;
 
-	sprintf(name, "slcan%d", i);
-	dev = alloc_netdev(sizeof(*sl), name, slc_setup);
-	if (!dev)
+	sl = kzalloc(sizeof(struct slcan_channel), GFP_KERNEL);
+
+	if (!sl)
 		return NULL;
 
-	dev->base_addr  = i;
-	sl = netdev_priv(dev);
+	for (j = 0; j < MUX_NETDEV_MAX; j++)
+		sl->dev[j] = NULL;
+
+	for (j = 0; j < muxnetdevs; j++) {
+		sprintf(name, "slcan%d", i * muxnetdevs + j);
+
+		dev = alloc_netdev(sizeof(*sl_dev), name, slc_setup);
+		if (!dev) {
+			kfree(sl);
+			return NULL;
+		}
+
+		dev->base_addr  = i * muxnetdevs + j;
+		sl_dev = netdev_priv(dev);
+
+		sl_dev->channel = sl;
+		sl_dev->addr = j;
+		sl_dev->xleft = 0;
+
+		sl->dev[j] = dev;
+	}
 
 	/* Initialize channel control data */
 	sl->magic = SLCAN_MAGIC;
-	sl->dev	= dev;
+
 	spin_lock_init(&sl->lock);
-	slcan_devs[i] = dev;
+	slcan_channels[i] = sl;
 
 	return sl;
 }
@@ -494,8 +608,8 @@ static struct slcan *slc_alloc(dev_t line)
 
 static int slcan_open(struct tty_struct *tty)
 {
-	struct slcan *sl;
-	int err;
+	struct slcan_channel *sl;
+	int err, i;
 
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
@@ -519,6 +633,7 @@ static int slcan_open(struct tty_struct *tty)
 	if (sl && sl->magic == SLCAN_MAGIC)
 		goto err_exit;
 
+
 	/* OK.  Find a free SLCAN channel to use. */
 	err = -ENFILE;
 	sl = slc_alloc(tty_devnum(tty));
@@ -531,13 +646,15 @@ static int slcan_open(struct tty_struct *tty)
 	if (!test_bit(SLF_INUSE, &sl->flags)) {
 		/* Perform the low-level SLCAN initialization. */
 		sl->rcount   = 0;
-		sl->xleft    = 0;
 
 		set_bit(SLF_INUSE, &sl->flags);
 
-		err = register_netdevice(sl->dev);
-		if (err)
-			goto err_free_chan;
+		for (i = 0; i < muxnetdevs; i++) {
+
+			err = register_netdevice(sl->dev[i]);
+			if (err)
+				goto err_free_chan;
+		}
 	}
 
 	/* Done.  We have linked the TTY line to a channel. */
@@ -569,7 +686,9 @@ err_exit:
 
 static void slcan_close(struct tty_struct *tty)
 {
-	struct slcan *sl = (struct slcan *) tty->disc_data;
+	int i;
+
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
 
 	/* First make sure we're connected. */
 	if (!sl || sl->magic != SLCAN_MAGIC || sl->tty != tty)
@@ -579,7 +698,8 @@ static void slcan_close(struct tty_struct *tty)
 	sl->tty = NULL;
 
 	/* Flush network side */
-	unregister_netdev(sl->dev);
+	for (i = 0; i < muxnetdevs; i++)
+		unregister_netdev(sl->dev[i]);
 	/* This will complete via sl_free_netdev */
 }
 
@@ -593,7 +713,7 @@ static int slcan_hangup(struct tty_struct *tty)
 static int slcan_ioctl(struct tty_struct *tty, struct file *file,
 		       unsigned int cmd, unsigned long arg)
 {
-	struct slcan *sl = (struct slcan *) tty->disc_data;
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
 	unsigned int tmp;
 
 	/* First make sure we're connected. */
@@ -602,8 +722,8 @@ static int slcan_ioctl(struct tty_struct *tty, struct file *file,
 
 	switch (cmd) {
 	case SIOCGIFNAME:
-		tmp = strlen(sl->dev->name) + 1;
-		if (copy_to_user((void __user *)arg, sl->dev->name, tmp))
+		tmp = strlen(sl->dev[0]->name) + 1;
+		if (copy_to_user((void __user *)arg, sl->dev[0]->name, tmp))
 			return -EFAULT;
 		return 0;
 
@@ -631,21 +751,32 @@ static int __init slcan_init(void)
 {
 	int status;
 
-	if (maxdev < 4)
-		maxdev = 4; /* Sanity */
+	if (maxchannel < 4)
+		maxchannel = 4; /* Sanity */
+
+	if (muxnetdevs < 1)
+		muxnetdevs = 1;
+
+	if (muxnetdevs > MUX_NETDEV_MAX)
+		muxnetdevs = MUX_NETDEV_MAX;
 
 	printk(banner);
-	printk(KERN_INFO "slcan: %d dynamic interface channels.\n", maxdev);
+	printk(KERN_INFO "slcan: %d dynamic interface channels.\n", maxchannel);
+
+	if (muxnetdevs > 1)
+		printk(KERN_INFO "slcan: xslcan multiplexer enabled ratio %d:1.\n",
+		       muxnetdevs);
 
-	slcan_devs = kzalloc(sizeof(struct net_device *)*maxdev, GFP_KERNEL);
-	if (!slcan_devs)
+	slcan_channels = kzalloc(sizeof(struct slcan_channel *)*maxchannel,
+					GFP_KERNEL);
+	if (!slcan_channels)
 		return -ENOMEM;
 
 	/* Fill in our line protocol discipline, and register it */
 	status = tty_register_ldisc(N_SLCAN, &slc_ldisc);
 	if (status)  {
 		printk(KERN_ERR "slcan: can't register line discipline\n");
-		kfree(slcan_devs);
+		kfree(slcan_channels);
 	}
 	return status;
 }
@@ -653,12 +784,11 @@ static int __init slcan_init(void)
 static void __exit slcan_exit(void)
 {
 	int i;
-	struct net_device *dev;
-	struct slcan *sl;
+	struct slcan_channel *sl;
 	unsigned long timeout = jiffies + HZ;
 	int busy = 0;
 
-	if (slcan_devs == NULL)
+	if (slcan_channels == NULL)
 		return;
 
 	/* First of all: check for active disciplines and hangup them.
@@ -668,11 +798,11 @@ static void __exit slcan_exit(void)
 			msleep_interruptible(100);
 
 		busy = 0;
-		for (i = 0; i < maxdev; i++) {
-			dev = slcan_devs[i];
-			if (!dev)
+		for (i = 0; i < maxchannel; i++) {
+
+			sl = slcan_channels[i];
+			if (!sl)
 				continue;
-			sl = netdev_priv(dev);
 			spin_lock_bh(&sl->lock);
 			if (sl->tty) {
 				busy++;
@@ -685,25 +815,28 @@ static void __exit slcan_exit(void)
 	/* FIXME: hangup is async so we should wait when doing this second
 	   phase */
 
-	for (i = 0; i < maxdev; i++) {
-		dev = slcan_devs[i];
-		if (!dev)
+	for (i = 0; i < maxchannel; i++) {
+		sl = slcan_channels[i];
+		if (!sl)
 			continue;
-		slcan_devs[i] = NULL;
+		slcan_channels[i] = NULL;
 
-		sl = netdev_priv(dev);
 		if (sl->tty) {
 			printk(KERN_ERR "%s: tty discipline still running\n",
-			       dev->name);
+			       sl->dev[i]->name);
 			/* Intentionally leak the control block. */
-			dev->destructor = NULL;
+			sl->dev[i]->destructor = NULL;
 		}
 
-		unregister_netdev(dev);
+		if (sl->dev[i] == NULL)
+			continue;
+
+		for (i = 0; i < muxnetdevs; i++)
+			unregister_netdev(sl->dev[i]);
 	}
 
-	kfree(slcan_devs);
-	slcan_devs = NULL;
+	kfree(slcan_channels);
+	slcan_channels = NULL;
 
 	i = tty_unregister_ldisc(N_SLCAN);
 	if (i)
diff --git a/include/linux/intel_qrk_j1708.h b/include/linux/intel_qrk_j1708.h
new file mode 100644
index 0000000..889e4d9
--- /dev/null
+++ b/include/linux/intel_qrk_j1708.h
@@ -0,0 +1,136 @@
+/*
+ * Copyright(c) 2013-2015 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+/*
+ * Intel Quark J1708 driver
+ */
+
+#ifndef __INTEL_QRK_J1708_H__
+#define __INTEL_QRK_J1708_H__
+
+#include <linux/types.h>
+#include <linux/ioctl.h>
+#include <linux/spinlock.h>
+
+#define MAX_J1708_LENGTH	21
+#define MAX_CONFIG_J1708_LENGTH 64
+
+#define PORT0 0
+#define PORT1 1
+
+/* keep as 2^xx */
+#define MAX_J1708_MSG_ENTRY_NUM 2048
+#define MRB_MASK (MAX_J1708_MSG_ENTRY_NUM - 1)
+
+#define MAX_J1708_CHAR_BUF_SIZE 512
+#define CBUF_MASK (MAX_J1708_CHAR_BUF_SIZE - 1)
+
+#define MAX_J1708_MID_CHAR_BUF_SIZE 1024
+#define MID_CBUF_MASK (MAX_J1708_MID_CHAR_BUF_SIZE - 1)
+
+#define J1708_BAUD 9600
+#define ONE_BIT_TIME_NS 104167
+
+/* 12 bits =  2 bits max character gap + 10 bits message data access */
+#define MAX_J1708_CHAR_GAP_BIT_TIME  12
+
+/* 22 bits =  12 bits minimal message gap + 10 bits message data access */
+#define MIN_J1708_MSG_GAP_BIT_TIME  22
+#define MIN_J1708_MSG_GAP_NS (MIN_J1708_MSG_GAP_BIT_TIME * ONE_BIT_TIME_NS)
+
+/* for watchdog_timer timeout set as 4 ms */
+#define TIMEOUT_IN_MS 4
+
+#define J1708_IOCTL_MAGIC 'Z'
+
+#define	J1708_IOCTL_BIND_UART		_IO(J1708_IOCTL_MAGIC, 1)
+#define	J1708_IOCTL_UNBIND_UART		_IO(J1708_IOCTL_MAGIC, 2)
+#define	J1708_IOCTL_START		_IO(J1708_IOCTL_MAGIC, 3)
+#define	J1708_IOCTL_STOP		_IO(J1708_IOCTL_MAGIC, 4)
+#define	J1708_IOCTL_RESET		_IO(J1708_IOCTL_MAGIC, 5)
+#define	J1708_IOCTL_SET_MSG_LENGTH	_IOW(J1708_IOCTL_MAGIC, 6, int)
+#define	J1708_IOCTL_GET_MSG_LENGTH	_IOR(J1708_IOCTL_MAGIC, 7, int)
+#define	J1708_IOCTL_GET_STAT		_IOR(J1708_IOCTL_MAGIC, 8, int)
+#define	J1708_IOCTL_SET_NONBLOCK	_IOW(J1708_IOCTL_MAGIC, 9, int)
+#define	J1708_IOCTL_GET_NONBLOCK	_IOR(J1708_IOCTL_MAGIC, 10, int)
+
+enum j1708_dev_state {
+	J1708_STATE_OPEN               = 0x0,
+	J1708_STATE_UART_BIND          = 0x1,
+	J1708_STATE_UART_UNBIND        = 0x2,
+	J1708_STATE_START_BUS_UNSYNC   = 0x3,
+	J1708_STATE_START_BUS_SYNC     = 0x4,
+	J1708_STATE_STOP               = 0x5,
+	J1708_STATE_CLOSE              = 0x6,
+};
+
+
+/*
+ * J1708 RX message entry
+ */
+struct j1708_msg_entry {
+	u32 length;				/* Msg length including MID */
+	u8  mid;				/* Message Identification */
+	u8  data[MAX_CONFIG_J1708_LENGTH];	/* message data with checksum */
+	u64 tsc[MAX_CONFIG_J1708_LENGTH];	/* timestamp */
+	u8  char_gap_exceed;			/* exceed 2 bit time char gap */
+} __packed;
+
+struct j1708_stats {
+	u32 uart_error_cnt;
+	u32 j1708_error_cnt;           /* excceed msg length + chksum error */
+	u32 j1708_warn_cnt;            /* break the max char gap */
+	u32 buf_msg_cnt;               /* unread message left in ring buffer */
+	u64 total_msg_cnt;             /* total messages received from uart */
+	u32 debug;                     /* TBD */
+	u32 overrun_msg_cnt;           /* msgs discarded due to overflow */
+	enum j1708_dev_state j1708_state; /* J1708 device state */
+} __packed;
+
+/*
+ * j1708 message ring buffer
+ */
+struct j1708_msg_ring_buffer {
+	struct j1708_msg_entry *msg;
+	u32 head;
+	u32 tail;
+	int cnt;
+	spinlock_t lock;
+};
+
+/*
+ * ring buffer for characters/tsc from UART I/O
+ */
+struct j1708_char_ring_buffer {
+	u8  data[MAX_J1708_CHAR_BUF_SIZE];
+	u64 tsc[MAX_J1708_CHAR_BUF_SIZE];
+
+	u32 head;
+	u32 tail;
+	int cnt;
+	spinlock_t lock;
+};
+
+/*
+ * intermidiate ring buffer for char/tsc message boundary detection
+ */
+struct j1708_mid_char_ring_buffer {
+	u8  data[MAX_J1708_MID_CHAR_BUF_SIZE];
+	u64 tsc[MAX_J1708_MID_CHAR_BUF_SIZE];
+
+	u32 head;
+	u32 tail;
+	int cnt;
+};
+
+#endif /* __INTEL_QRK_J1708_H__ */
